var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Diolog_1 = require("./Scripts/Diolog");
var Button1_1 = require("./Scripts/Button1");
var Reader_1 = require("./Scripts/Reader");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("Scripts/Diolog.ts", Diolog_1.default);
        reg("Scripts/Button1.ts", Button1_1.default);
        reg("Scripts/Reader.ts", Reader_1.default);
    };
    GameConfig.width = 1920;
    GameConfig.height = 1080;
    GameConfig.scaleMode = "full";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "left";
    GameConfig.startScene = "Msg.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./Scripts/Button1":3,"./Scripts/Diolog":4,"./Scripts/Reader":5}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Diolog_1 = require("./Diolog");
var Button1 = /** @class */ (function (_super) {
    __extends(Button1, _super);
    function Button1() {
        return _super.call(this) || this;
    }
    Button1.prototype.onEnable = function () {
        var button = this.owner;
        button.on(Laya.Event.CLICK, this, function () {
            Diolog_1.default.instance.button1Click();
        });
    };
    return Button1;
}(Laya.Script));
exports.default = Button1;
},{"./Diolog":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Reader_1 = require("./Reader");
var DiaLab = /** @class */ (function (_super) {
    __extends(DiaLab, _super);
    function DiaLab() {
        var _this = _super.call(this) || this;
        _this.story = [""]; //文本
        DiaLab.instance = _this;
        return _this;
    }
    DiaLab.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
        this.loadScene("Msg");
    };
    DiaLab.prototype.onEnable = function () {
        this.Diolog.on(Laya.Event.CLICK, this, this.ClickFn);
    };
    DiaLab.prototype.onAwake = function () {
        this.reader = this.getComponent(Reader_1.default);
        this.onlyOnce = false;
        this.line = 7;
        this.word = 0;
        this.chaNum = 6;
        this.findNext = 4;
        this.lineComplete = false;
        this.ShowWords();
    };
    DiaLab.prototype.button1Click = function () {
    };
    DiaLab.prototype.ShowWords = function () {
        var _this = this;
        this.reader.read(this.chaNum);
        this.showWord = setInterval(function () {
            _this.splitted = _this.story[_this.line][_this.word]; //把文本拆開 +1是為了避開 開頭的代號
            if (_this.splitted == undefined)
                return; //運行到最後一字時 避免出錯  
            _this.Diolog.text += _this.splitted;
            _this.word++; //跳下一個字            
            if (_this.story[_this.line][_this.word] == undefined) { //判斷此句是否結束
                clearInterval(_this.showWord); //關閉showWord
                _this.lineComplete = true;
            }
        }, 150);
    };
    DiaLab.prototype.isEnd = function () {
        if (this.story[this.line + this.findNext] == undefined) { //文本是否結束
            this.Diolog.off(Laya.Event.CLICK, this, this.ClickFn); //關閉點擊事件
            console.log("結束");
            return;
        }
        else if (this.story[this.line][this.word] == undefined) { //此句是否結束
            this.onlyOnce = true;
            this.word = 0;
            this.Diolog.text = "";
            this.line += this.findNext; //下一句話
            this.chaNum += this.findNext; //下一個人
            return;
        }
    };
    DiaLab.prototype.ClickFn = function (e) {
        this.lineComplete = !this.lineComplete;
        if (this.lineComplete) { //文字還沒跳完時 點擊使他一次跳完
            clearInterval(this.showWord);
            this.word = this.story[this.line].length; //this.word = 此句最後一個字 (作為條件判斷是否進入下一句)
            this.Diolog.text = this.story[this.line]; //.substring(0, this.story[this.line].length);//跳出完整句子 避開 開頭代號
        }
        else { //文字跳完時 點擊跳出下一句 並呼叫showWord
            this.isEnd();
            this.ShowWords();
        }
    };
    DiaLab.prototype.nameCase = function (name) {
        switch (name) {
            case "吳俞恆":
                this.Name.text = "吳俞恆";
                break;
            case "少女":
                this.Name.text = "少女";
                break;
            case "":
                this.Name.text = "";
                break;
            case "D":
                this.Name.text = "D";
                break;
            case "E":
                this.Name.text = "E";
                break;
            case "F":
                this.Name.text = "F";
                break;
            case "G":
                this.Name.text = "G";
                break;
            case "H":
                this.Name.text = "H";
                break;
            case "I":
                this.Name.text = "I";
                break;
        }
    };
    return DiaLab;
}(Laya.Scene));
exports.default = DiaLab;
},{"./Reader":5}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Diolog_1 = require("./Diolog");
var Reader = /** @class */ (function (_super) {
    __extends(Reader, _super);
    function Reader() {
        var _this = _super.call(this) || this;
        // private finder: number;
        _this.storyPath = "../laya/assets/res/test.csv";
        return _this;
    }
    Reader.prototype.read = function (Num) {
        Laya.loader.load(this.storyPath, new Laya.Handler(this, function (e) {
            Diolog_1.default.instance.nameCase(e.split(",")[Num]);
            if (Diolog_1.default.instance.onlyOnce)
                return;
            Diolog_1.default.instance.story.length = 0;
            Diolog_1.default.instance.story = Diolog_1.default.instance.story.concat(e.split(","));
        }));
    };
    return Reader;
}(Laya.Script));
exports.default = Reader;
},{"./Diolog":4}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
